training[["Levels"]] = factor(training[["Levels"]])
trctrl <- trainControl(method = "repeatedcv", number = 10 , repeats = 3)
svm_linear <- train(Levels ~., data = training, method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_linear
test_pred <- predict(svm_linear, newData = testing)
test_pred
confusionMatrix(table(test_pred, testing$Levels))
length(testing$Levels)
length(test_pred)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
trctrl <- trainControl(method = "repeatedcv", number = 10 , repeats = 3)
svm_linear <- train(Levels ~., data = train, method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_linear
test_pred <- predict(svm_linear, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
length(test_pred)
length(test$Levels)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stressdata.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= as.numeric(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
test_pred <- predict(svm_linear, newData = test, type='class')
test_pred <- predict(svm_linear, newData = test, type='prob')
test_pred
confusionMatrix(test_pred, test$Levels)
test_pred <- predict(svm_linear, newData = test, type='raw')
test_pred
confusionMatrix(test_pred, test$Levels)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
library(FSelector)
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(xlsx)
library(data.tree)
library(caTools)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
svm.model = svm(Levels ~., data = df, type='C-classification', kernel='liner', scale=FALSE)
svm.model = svm(Levels ~., data = df, type='C-classification', kernel='linear', scale=FALSE)
install.packages("e1071")
library(e1071)
svm.model = svm(Levels ~., data = df, type='C-classification', kernel='linear', scale=FALSE)
summary(svm.model)
test_pred <- predict(svm.model, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
length(test$Levels)
length(test_pred)
svm.model = svm(Levels ~., data = test, type='C-classification', kernel='linear', scale=FALSE)
summary(svm.model)
test_pred <- predict(svm.model, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
svm.model = svm(Levels ~., data = train, type='C-classification', kernel='linear', scale=FALSE)
summary(svm.model)
test_pred <- predict(svm.model, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
length(test_pred)
svm.model = svm(Levels ~., data = test, type='C-classification', kernel='linear', scale=FALSE)
summary(svm.model)
test_pred <- predict(svm.model, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
trctrl <- trainControl(method = "repeatedcv", number = 10 , repeats = 3)
svm_linear <- train(Levels ~., data = test, method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
trctrl <- trainControl(method = "repeatedcv", number = 10 , repeats = 3)
svm_linear <- train(Levels ~., data = test, method = "svmLinear",
trControl = trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_linear
test_pred <- predict(svm_linear, newData = test)
test_pred
confusionMatrix(test_pred, test$Levels)
install.packages("class")
library(class)
library(FSelector)
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(xlsx)
library(data.tree)
library(caTools)
library(e1071)
library(class)
install.packages('caret')
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 1)
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train_scale = subset(df,sample==TRUE)
test_scale = subset(df, sample == FALSE)
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 1)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
cm
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 19)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
cm
Accuracy(cm)
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 20)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
cm
Accuracy(cm)
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 20)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
cm
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 50)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
cm
confusionMatrix(cm)
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_scale$Levels,
k = 20)
classifier_knn
cm <- table(test_scale$Levels, classifier_knn)
confusionMatrix(cm)
library(FSelector)
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(xlsx)
library(data.tree)
library(caTools)
library(e1071)
library(class)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train_scale = subset(df,sample==TRUE)
test_scale = subset(df, sample == FALSE)
classifier_cl <- naiveBayes(Levels ~ ., data = train_scale)
classifier_cl
y_pred <- predict(classifier_cl, newdata = test_scale)
cm <- table(test_scale$Levels, y_pred)
cm
confusionMatrix(cm)
library(FSelector)
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(xlsx)
library(data.tree)
library(caTools)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stressdata.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
df <- mutate(df, Score= as.numeric(Score), Levels= as.numeric(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
classifier_RF = randomForest(x = train[-5],
y = train$Levels,
ntree = 500)
install.packages("randomForest")
library(randomForest)
detach("package:dplyr", unload = TRUE)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stressdata.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
df <- dplyr::mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
classifier_RF = randomForest(x = train[-5],
y = train$Levels,
ntree = 500)
classifier_RF
classifier_RF = randomForest(x = train[-5],
y = train$Levels,
ntree = 100)
classifier_RF
classifier_RF = randomForest(x = train[-5],
y = train$Levels,
ntree = 1)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 1)
classifier_RF
y_pred = predict(classifier_RF, newdata = test[-5])
y_pred = predict(classifier_RF, newdata = test)
str(test)
length(test)
length(train)
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 2)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 3)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 4)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 5)
classifier_RF
y_pred = predict(classifier_RF, newdata = test)
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 6)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 7)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 8)
classifier_RF
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 9)
classifier_RF
y_pred = predict(classifier_RF, newdata = test)
y_pred = predict(classifier_RF, newdata = test[-5])
y_pred = predict(classifier_RF, newdata = test[-20])
rf = randomForest(Levels ~., data=train, mtry=4, ntree=2001, importance=TRUE)
rf = randomForest(Levels ~., data=train, ntree=2001, importance=TRUE)
rf
pred <- predict(rf, test[, 1:11], type="Response")
pred <- predict(rf, test[, 1:2], type="Response")
pred
confusionMatrix(pred, test$Levels)
pred <- predict(rf, test, type="Response")
pred
confusionMatrix(pred, test$Levels)
rf
confusionMatrix(rf)
classifier_RF = randomForest(x = train,
y = train$Levels,
ntree = 2001)
classifier_RF
y_pred = predict(classifier_RF, test)
y_pred <- predict(classifier_RF, test)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stressdata.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- dplyr::mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
rf = randomForest(Levels ~., data=train, ntree=2001, importance=TRUE)
rf
pred <- predict(rf, test, type="Response")
pred
confusionMatrix(pred, test$Levels)
library(MASS)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
df <- dplyr::mutate(df, Score= as.numeric(Score), Levels= factor(Levels))
set.seed(5)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
lm.fit <- glm(Levels~., data = train)
apply(df, 2, function(x) sum(is.na(x)))
lm.fit <- glm(Levels~., data = train)
lm.fit <- glm(Levels ~., data = train)
lm.fit <- glm(Score ~., data = train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
MSE.lm <- sum((pr.lm - test$Score)^2) / nrow(test)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
scaled <- as.df.frame(scale(df,
center = mins,
scale = maxs - mins))
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
vars_scale <- df %>%
select_if(is.numeric) %>%
colnames()
library(dplyr)
vars_scale <- df %>%
select_if(is.numeric) %>%
colnames()
scale_min_max <- function(x) scale(x, center = min(x), scale = max(x) - min(x))
df %>%
mutate_at(vars_scale, scale_min_max)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
apply(df, 2, function(x) sum(is.na(x)))
lm.fit <- glm(Score ~., data = train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
MSE.lm <- sum((pr.lm - test$Score)^2) / nrow(test)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
vars_scale <- df %>%
select_if(is.numeric) %>%
colnames()
scale_min_max <- function(x) scale(x, center = min(x), scale = max(x) - min(x))
df %>%
mutate_at(vars_scale, scale_min_max)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
train_ <- scale_min_max[index, ]
scaled <- as.data.frame(scale(df,scale_min_max))
library(FSelector)
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(xlsx)
library(data.tree)
library(caTools)
library(e1071)
library(MASS)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_202\\jre")
Sys.getenv('JAVA_HOME')
setwd("C:\\Users\\HP\\Desktop")
add <- "Stress2.xlsx"
df <- read.xlsx(add, sheetName = "Sheet1")
df <- dplyr::select(df, Score, Levels)
apply(df, 2, function(x) sum(is.na(x)))
index <- sample(1 : nrow(df),
round(0.75 * nrow(df)))
train <- df[index, ]
test <- df[-index, ]
lm.fit <- glm(Levels~., df = train)
sample = sample.split(df$Levels, SplitRatio = .70)
train = subset(df,sample==TRUE)
test = subset(df, sample == FALSE)
lm.fit <- glm(Levels~., df = train)
apply(df, 2, function(x) sum(is.na(x)))
index <- sample(1 : nrow(df),
round(0.75 * nrow(df)))
train <- df[index, ]
test <- df[-index, ]
lm.fit <- glm(Levels~., df = train)
apply(df, 2, function(x) sum(is.na(x)))
index <- sample(1 : nrow(df),
round(0.75 * nrow(df)))
train <- df[index, ]
test <- df[-index, ]
lm.fit <- glm(Levels ~., df = train)
lm.fit <- glm(Score ~., df = train)
index <- 234
train <- df[index, ]
test <- df[-index, ]
lm.fit <- glm(Score ~., df = train)
lm.fit <- glm(df$Score ~., df = train)
training_set = subset(df, subset = split)
test_set = subset(df, subset = !split)
lm.fit <- glm(formula = Levels ~., df = training_set)
lm.fit <- glm(formula = Levels ~ ., df = training_set)
lm.fit <- glm(formula = Levels ~ ., data = training_set)
apply(df, 2, function(x) sum(is.na(x)))
index <- 234
train <- df[index, ]
test <- df[-index, ]
lm.fit <- glm(formula = Levels ~ ., data = training_set)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
MSE.lm <- sum((pr.lm - test$medv)^2) / nrow(test)
maxs <- apply(data, 2, max)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled <- as.data.frame(scale(df,
center = mins,
scale = maxs - mins))
train_ <- scaled[index, ]
test_ <- scaled[-index, ]
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
detach("package:dplyr", unload = TRUE)
library(neuralnet)
n <- names(train_)
f <- as.formula(paste("Levels ~",
paste(n[!n %in% "Levels"],
collapse = " + ")))
nn <- neuralnet(f, data = train_,
hidden = c(4, 2),
linear.output = T)
plot(nn)
confusionMatrix(nn)
tree_pred <- predict(nn, test_)
confusionMatrix(tree_pred,test_$Levels )
dim(tree_pred)
dim(test_$Levels)
nn$result.matrix
