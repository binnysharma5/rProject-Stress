import pandas as pd
import numpy as np

# Load the data into a pandas dataframe
data = pd.read_csv('Stress.csv')

# Define the actual and predicted labels
actual_labels = data['Levels']
predicted_labels = pd.cut(data['Score'], bins=[0, 10, 20, 30, 40, 50], labels=[1, 2, 3, 4, 5])

# Create the confusion matrix
confusion_matrix = pd.crosstab(actual_labels, predicted_labels, rownames=['Actual'], colnames=['Predicted'])

# Display the matrix
print(confusion_matrix)


Predicted   1   2   3  4  5
Actual
1          88  63   0  0  0
2           0  59   0  0  0
3           0  21  36  0  0
4           0   0  34  2  0
5           0   0   0  6  1


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			   Perceptron and Multilayer Perceptron neural networks
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Perceptron
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix

# Load the data
data = pd.read_csv("Stress.csv")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.3, random_state=42)

# Create and train the Perceptron model
perceptron_model = Perceptron()
perceptron_model.fit(X_train, y_train)

# Create and train the Multilayer Perceptron model
mlp_model = MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000)
mlp_model.fit(X_train, y_train)

# Make predictions on the testing set
perceptron_preds = perceptron_model.predict(X_test)
mlp_preds = mlp_model.predict(X_test)

# Generate confusion matrices for both models
perceptron_cm = confusion_matrix(y_test, perceptron_preds, labels=[1, 2, 3, 4, 5])
mlp_cm = confusion_matrix(y_test, mlp_preds, labels=[1, 2, 3, 4, 5])

# Print the confusion matrices
print("Perceptron Confusion Matrix:")
print(perceptron_cm)
print("Multilayer Perceptron Confusion Matrix:")
print(mlp_cm)


Perceptron Confusion Matrix:
[[46  5  2  0  0]
 [ 3 11  6  0  0]
 [ 0  7  9  0  0]
 [ 0  4  7  0  0]
 [ 0  0  1  0  0]]
Multilayer Perceptron Confusion Matrix:
[[53  0  0  0  0]
 [ 4  9  7  0  0]
 [ 0  3 10  3  0]
 [ 0  0  2  9  0]
 [ 0  0  0  1  0]]


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				Support Vector Machine (SVM) classifier
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix

import pandas as pd

# Load dataset
df = pd.read_csv('Stress.csv')

# Split data into train and test sets
X = df.iloc[:, :-1]
y = df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVM classifier
clf = SVC(kernel='rbf', random_state=42)
clf.fit(X_train, y_train)

# Make predictions on test set
y_pred = clf.predict(X_test)

# Create confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred, labels=[1, 2, 3, 4, 5])
print(conf_matrix)


[[35  0  0  0  0] 
 [ 0 11  0  0  0] 
 [ 0  0 14  0  0] 
 [ 0  0  0  7  0] 
 [ 0  0  0  0  0]]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					 RNN
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN
from sklearn.metrics import confusion_matrix

# Load the data
data = pd.read_csv("Stress.csv")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.3, random_state=42)

# Convert data to numpy arrays
X_train = X_train.to_numpy()
X_test = X_test.to_numpy()
y_train = y_train.to_numpy()
y_test = y_test.to_numpy()

# Reshape the data for RNN input
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Create and train the RNN model
model = Sequential()
model.add(SimpleRNN(units=10, activation='relu', input_shape=(X_train.shape[1], 1)))
model.add(Dense(units=6, activation='softmax'))
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=50, batch_size=32)

# Make predictions on the testing set
rnn_preds = np.argmax(model.predict(X_test), axis=1) + 1

# Generate confusion matrix for the RNN model
rnn_cm = confusion_matrix(y_test, rnn_preds, labels=[1, 2, 3, 4, 5])


# Print the confusion matrix
print("RNN Confusion Matrix:")
print(rnn_cm)


RNN Confusion Matrix:
[[ 0 53  0  0  0]
 [ 0 10  9  1  0]
 [ 0  0  4 12  0]
 [ 0  0  0 11  0]
 [ 0  0  0  1  0]]
